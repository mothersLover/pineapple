Index: src/main/java/com/komin/core/Application.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/komin/core/Application.java	(date 1539772996000)
+++ src/main/java/com/komin/core/Application.java	(date 1539869315000)
@@ -1,17 +1,17 @@
 package com.komin.core;
 
+import com.komin.core.repository.UserRepository;
 import org.kurento.client.KurentoClient;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.ComponentScan;
 
 @SpringBootApplication
 public class Application {
 
     @Bean
-    public UserRegistry getUserRegistry() {
-        return new UserRegistry();
+    public UserRepository getUserRepository() {
+        return new UserRepository();
     }
 
     @Bean
Index: src/main/java/com/komin/core/UserSession.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/komin/core/UserSession.java	(date 1539772996000)
+++ src/main/java/com/komin/core/UserSession.java	(date 1539869315000)
@@ -27,6 +27,7 @@
 import javax.servlet.http.HttpSession;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.List;
 
 /**
@@ -44,6 +45,7 @@
   private boolean isReadyToCall;
   private WebRtcEndpoint webRtcEndpoint;
   private final List<IceCandidate> candidateList = new ArrayList<IceCandidate>();
+  private final List<String> tags = new ArrayList<>();
 
   private boolean anonymous;
 
@@ -98,6 +100,18 @@
     this.webRtcEndpoint = null;
     this.candidateList.clear();
     this.setReadyToCall(false);
+    this.tags.clear();
+  }
+
+  public void initTags(Collection<String> tags) {
+    if (!this.tags.isEmpty()) {
+      this.tags.clear();
+    }
+    this.tags.addAll(tags);
+  }
+
+  public Collection<String> getTags() {
+    return this.tags;
   }
 
   /**
Index: src/main/java/com/komin/core/controllers/ActionSocketController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/komin/core/controllers/ActionSocketController.java	(date 1539772996000)
+++ src/main/java/com/komin/core/controllers/ActionSocketController.java	(date 1539869315000)
@@ -4,7 +4,7 @@
 import com.google.gson.JsonArray;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
-import com.komin.core.UserRegistry;
+import com.komin.core.repository.UserRepository;
 import com.komin.core.UserSession;
 import com.komin.core.exceptions.KominRunTimeException;
 import com.komin.core.services.Connect2UsersService;
@@ -12,7 +12,6 @@
 import com.komin.core.services.SendMessageToUserService;
 import org.kurento.client.IceCandidate;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Required;
 import org.springframework.messaging.handler.annotation.MessageExceptionHandler;
 import org.springframework.messaging.handler.annotation.MessageMapping;
 import org.springframework.messaging.handler.annotation.Payload;
@@ -27,15 +26,15 @@
 @Controller
 public class ActionSocketController {
     private final static String DESTINATION_ICECANDIDATES_COMMAND = "/queue/iceCandidates";
-    private final UserRegistry userRegistry;
+    private final UserRepository userRepository;
     private final SendMessageToUserService sendMessageToUserService;
     private final Connect2UsersService connect2UsersService;
     private final SendChatMessageService sendChatMessageService;
 
     @Autowired
-    public ActionSocketController(UserRegistry userRegistry, SendMessageToUserService sendMessageToUserService,
+    public ActionSocketController(UserRepository userRepository, SendMessageToUserService sendMessageToUserService,
                                   Connect2UsersService connect2UsersService, SendChatMessageService sendChatMessageService) {
-        this.userRegistry = userRegistry;
+        this.userRepository = userRepository;
         this.sendMessageToUserService = sendMessageToUserService;
         this.connect2UsersService = connect2UsersService;
         this.sendChatMessageService = sendChatMessageService;
@@ -49,12 +48,12 @@
             throw new IllegalArgumentException("Can't find sessionId and session attributes!");
         }
         UserSession userSession;
-        if (!userRegistry.exists(sessionId)) {
+        if (!userRepository.exists(sessionId)) {
             HttpSession httpSession = (HttpSession) session;
             userSession = new UserSession(httpSession, sessionId);
-            userRegistry.register(userSession);
+            userRepository.register(userSession);
         } else {
-            userSession = userRegistry.getBySessionId(sessionId);
+            userSession = userRepository.getBySessionId(sessionId);
         }
 
         Map objectMap = new Gson().fromJson(message, Map.class);
@@ -87,10 +86,10 @@
         if (sessionId == null) {
             throw new IllegalArgumentException("Can't find sessionId attribute!");
         }
-        if (!userRegistry.exists(sessionId)) {
+        if (!userRepository.exists(sessionId)) {
             throw new RuntimeException("User session is not exist! Please try to reload page");
         }
-        UserSession userSession = userRegistry.getBySessionId(sessionId);
+        UserSession userSession = userRepository.getBySessionId(sessionId);
         if (userSession.getSdpOffer() == null || userSession.getSdpOffer().equals("")) {
             throw new IllegalArgumentException("Can't find sdpOffer!");
         }
@@ -124,8 +123,8 @@
         if (sessionId == null) {
             throw new IllegalArgumentException("Can't find sessionId attribute!");
         }
-        if (userRegistry.exists(sessionId)) {
-            connect2UsersService.stopCommunication(userRegistry.getBySessionId(sessionId));
+        if (userRepository.exists(sessionId)) {
+            connect2UsersService.stopCommunication(userRepository.getBySessionId(sessionId));
         }
     }
 
@@ -134,8 +133,8 @@
     public String handleException(Throwable exception) {
         if (exception instanceof KominRunTimeException) {
             String sessionId = ((KominRunTimeException) exception).getSessionId();
-            if (sessionId != null && userRegistry.exists(sessionId)) {
-                userRegistry.removeBySessionId(sessionId);
+            if (sessionId != null && userRepository.exists(sessionId)) {
+                userRepository.removeBySessionId(sessionId);
             }
         }
         return exception.getMessage();
@@ -147,10 +146,10 @@
         if (sessionId == null) {
             throw new IllegalArgumentException("Can't find sessionId attribute!");
         }
-        if (userRegistry.exists(sessionId)) {
-            UserSession userSession = userRegistry.getBySessionId(sessionId);
+        if (userRepository.exists(sessionId)) {
+            UserSession userSession = userRepository.getBySessionId(sessionId);
             connect2UsersService.stopCommunication(userSession);
-            userRegistry.removeBySessionId(sessionId);
+            userRepository.removeBySessionId(sessionId);
         }
     }
 
@@ -161,7 +160,7 @@
             throw new IllegalArgumentException("Can't find sessionId attribute!");
         }
         JsonObject jsonObject = new Gson().fromJson(message, JsonObject.class);
-        UserSession userSession = userRegistry.getBySessionId(sessionId);
+        UserSession userSession = userRepository.getBySessionId(sessionId);
         if (userSession == null) {
             throw new IllegalArgumentException("Can't find user for session - " + sessionId + " !");
         }
Index: src/main/java/com/komin/core/ActiveUserRegistry.java
===================================================================
--- src/main/java/com/komin/core/ActiveUserRegistry.java	(date 1539772996000)
+++ src/main/java/com/komin/core/repository/ActiveUserRepository.java	(date 1539869315000)
@@ -1,12 +1,17 @@
-package com.komin.core;
+package com.komin.core.repository;
 
+import com.komin.core.CallMediaPipeline;
+import com.komin.core.UserSession;
+import com.komin.core.utils.ResolvingTagsFromUserUtils;
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
 import java.util.ArrayDeque;
+import java.util.Collection;
 import java.util.concurrent.ConcurrentHashMap;
 
 @Component
-public class ActiveUserRegistry {
+public class ActiveUserRepository {
     private static final int QUEUE_INITIAL_CAPACITY = 100;
     private final ArrayDeque<UserSession> activeUserSessions = new ArrayDeque<>(QUEUE_INITIAL_CAPACITY);
     private final PipelineController pipelineController = new PipelineController();
@@ -17,6 +22,14 @@
             activeUserSessions.addLast(userSession);
             return null;
         }
+        Collection<String> userTags = userSession.getTags();
+        if (!userTags.isEmpty()) {
+            UserSession candidate = ResolvingTagsFromUserUtils.resolve(activeUserSessions, userTags);
+            if (candidate != null) {
+                activeUserSessions.remove(candidate);
+                return candidate;
+            }
+        }
         return activeUserSessions.pollFirst();
     }
 
Index: src/main/java/com/komin/core/repository/TagRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/komin/core/repository/TagRepository.java	(date 1539869315000)
+++ src/main/java/com/komin/core/repository/TagRepository.java	(date 1539869315000)
@@ -0,0 +1,10 @@
+package com.komin.core.repository;
+
+import com.komin.core.UserSession;
+
+public interface TagRepository {
+
+    void registerTags(UserSession userSession);
+
+    void deleteTags(UserSession userSession);
+}
Index: src/main/java/com/komin/core/repository/TagRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/komin/core/repository/TagRepositoryImpl.java	(date 1539869315000)
+++ src/main/java/com/komin/core/repository/TagRepositoryImpl.java	(date 1539869315000)
@@ -0,0 +1,35 @@
+package com.komin.core.repository;
+
+import com.komin.core.UserSession;
+import org.springframework.stereotype.Component;
+
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+
+@Component
+public class TagRepositoryImpl implements TagRepository {
+    private final Map<String, Set<String>> tagsMap = new ConcurrentHashMap<>();
+
+    public TagRepositoryImpl() {}
+
+    public void registerTags(UserSession userSession) {
+        Collection<String> tags = userSession.getTags();
+        tags.forEach(tag -> tagsMap.computeIfAbsent(tag, x -> new HashSet<>()).add(userSession.getSessionId()));
+    }
+
+    public synchronized void deleteTags(UserSession userSession) {
+        Collection<String> tags = userSession.getTags();
+        tags.forEach(tag -> {
+            Set<String> strings = tagsMap.get(tag);
+            if (strings != null) {
+                strings.remove(userSession.getSessionId());
+                if (strings.isEmpty()) {
+                    tagsMap.remove(tag);
+                }
+            }
+        });
+    }
+}
Index: src/main/java/com/komin/core/UserRegistry.java
===================================================================
--- src/main/java/com/komin/core/UserRegistry.java	(date 1539772996000)
+++ src/main/java/com/komin/core/repository/UserRepository.java	(date 1539869315000)
@@ -1,5 +1,6 @@
-package com.komin.core;
+package com.komin.core.repository;
 
+import com.komin.core.UserSession;
 import org.springframework.stereotype.Component;
 import org.springframework.stereotype.Service;
 import org.springframework.web.socket.WebSocketSession;
@@ -12,7 +13,7 @@
  * its name as key in the map.
  *
  */
-public class UserRegistry {
+public class UserRepository {
 
   private ConcurrentHashMap<String, UserSession> usersBySessionId = new ConcurrentHashMap<>();
 
Index: src/main/java/com/komin/core/services/Connect2UsersService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/komin/core/services/Connect2UsersService.java	(date 1539772996000)
+++ src/main/java/com/komin/core/services/Connect2UsersService.java	(date 1539869315000)
@@ -1,9 +1,10 @@
 package com.komin.core.services;
 
 import com.google.gson.JsonObject;
-import com.komin.core.ActiveUserRegistry;
+import com.komin.core.repository.ActiveUserRepository;
 import com.komin.core.CallMediaPipeline;
 import com.komin.core.UserSession;
+import com.komin.core.repository.TagRepository;
 import org.kurento.client.FaceOverlayFilter;
 import org.kurento.client.IceCandidate;
 import org.kurento.client.KurentoClient;
@@ -20,20 +21,23 @@
     private static final String DESTINATION_WAIT_COMMAND = "/queue/wait";
     private static final String DESTINATION_STOP_COMMAND = "/queue/stop";
     private static final String DESTINATION_CONNECT_COMMAND = "/queue/connect";
-    private final ActiveUserRegistry activeUserRegistry;
+    private final ActiveUserRepository activeUserRepository;
     private final SendMessageToUserService messageService;
     private final KurentoClient kurentoClient;
+    private final TagRepository tagRepository;
 
     @Autowired
-    public Connect2UsersService(ActiveUserRegistry activeUserRegistry, SendMessageToUserService messageService,
-                                KurentoClient kurentoClient) {
-        this.activeUserRegistry = activeUserRegistry;
+    public Connect2UsersService(ActiveUserRepository activeUserRepository, SendMessageToUserService messageService,
+                                KurentoClient kurentoClient, TagRepository tagRepository) {
+        this.activeUserRepository = activeUserRepository;
         this.messageService = messageService;
         this.kurentoClient = kurentoClient;
+        this.tagRepository = tagRepository;
     }
 
     public void tryToConnectToRandomUser(UserSession userSession) {
-        UserSession candidate = activeUserRegistry.findCandidate(userSession);
+        tagRepository.registerTags(userSession);
+        UserSession candidate = activeUserRepository.findCandidate(userSession);
         if (candidate == null) {
             JsonObject jsonObject = new JsonObject();
             jsonObject.addProperty("action", "wait");
@@ -55,8 +59,8 @@
         final JsonObject startCommunicationForFirst = new JsonObject();
         try {
             pipeline = new CallMediaPipeline(kurentoClient, firstUser, secondUser);
-            activeUserRegistry.registerPipeline(firstUser, pipeline);
-            activeUserRegistry.registerPipeline(secondUser, pipeline);
+            activeUserRepository.registerPipeline(firstUser, pipeline);
+            activeUserRepository.registerPipeline(secondUser, pipeline);
 
             WebRtcEndpoint secondWebRtcEp = pipeline.getSecondWebRtcEp();
             secondUser.setWebRtcEndpoint(secondWebRtcEp);
@@ -106,10 +110,10 @@
                 pipeline.release();
             }
 
-            activeUserRegistry.removePipeline(firstUser);
-            activeUserRegistry.removeUserFromQueue(firstUser);
-            activeUserRegistry.removePipeline(secondUser);
-            activeUserRegistry.removeUserFromQueue(secondUser);
+            activeUserRepository.removePipeline(firstUser);
+            activeUserRepository.removeUserFromQueue(firstUser);
+            activeUserRepository.removePipeline(secondUser);
+            activeUserRepository.removeUserFromQueue(secondUser);
 
             //todo implement logic of re-try with other candidates (send to stopAndCall method)
             messageService.sendMessage(DESTINATION_STOP_COMMAND, new JsonObject(), firstUser);
@@ -127,27 +131,28 @@
         FaceOverlayFilter faceOverlayFilter = new FaceOverlayFilter.Builder(pipeline.getPipeline()).build();
 
         faceOverlayFilter.setOverlayedImage(imageUrl, 0.0F, 0.0F,
-                1.0F, 1.0F);
+                1.5F, 1.5F);
         return faceOverlayFilter;
     }
 
     public void stopCommunication(UserSession stopperSession) {
-        activeUserRegistry.removeUserFromQueue(stopperSession);
+        tagRepository.deleteTags(stopperSession);
+        activeUserRepository.removeUserFromQueue(stopperSession);
         stopperSession.clear();
-        if (activeUserRegistry.existPipeline(stopperSession)) {
-            CallMediaPipeline pipeline = activeUserRegistry.getPipeline(stopperSession);
+        if (activeUserRepository.existPipeline(stopperSession)) {
+            CallMediaPipeline pipeline = activeUserRepository.getPipeline(stopperSession);
 
             UserSession firstSession = pipeline.getFirstSession();
-            activeUserRegistry.removeUserFromQueue(firstSession);
+            activeUserRepository.removeUserFromQueue(firstSession);
             firstSession.clear();
 
             UserSession secondSession = pipeline.getSecondSession();
-            activeUserRegistry.removeUserFromQueue(secondSession);
+            activeUserRepository.removeUserFromQueue(secondSession);
             secondSession.clear();
 
             pipeline.release();
-            activeUserRegistry.removePipeline(firstSession);
-            activeUserRegistry.removePipeline(secondSession);
+            activeUserRepository.removePipeline(firstSession);
+            activeUserRepository.removePipeline(secondSession);
 
             JsonObject stopMessage = new JsonObject();
             stopMessage.addProperty("action", "stop");
Index: src/main/java/com/komin/core/services/SendChatMessageService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/komin/core/services/SendChatMessageService.java	(date 1539772996000)
+++ src/main/java/com/komin/core/services/SendChatMessageService.java	(date 1539869315000)
@@ -1,7 +1,7 @@
 package com.komin.core.services;
 
 import com.google.gson.JsonObject;
-import com.komin.core.ActiveUserRegistry;
+import com.komin.core.repository.ActiveUserRepository;
 import com.komin.core.CallMediaPipeline;
 import com.komin.core.UserSession;
 import org.slf4j.Logger;
@@ -14,16 +14,16 @@
     private static final String DESTINATION = "/queue/newMessage";
     private static final Logger LOGGER = LoggerFactory.getLogger(SendChatMessageService.class);
     private final SendMessageToUserService sendMessageToUserService;
-    private final ActiveUserRegistry activeUserRegistry;
+    private final ActiveUserRepository activeUserRepository;
 
     @Autowired
-    public SendChatMessageService(SendMessageToUserService sendMessageToUserService, ActiveUserRegistry activeUserRegistry) {
+    public SendChatMessageService(SendMessageToUserService sendMessageToUserService, ActiveUserRepository activeUserRepository) {
         this.sendMessageToUserService = sendMessageToUserService;
-        this.activeUserRegistry = activeUserRegistry;
+        this.activeUserRepository = activeUserRepository;
     }
 
     public void sendMessageToOtherUsersFromMyActiveSession(UserSession userSession, JsonObject jsonObject) {
-        CallMediaPipeline pipeline = activeUserRegistry.getPipeline(userSession);
+        CallMediaPipeline pipeline = activeUserRepository.getPipeline(userSession);
         // TODO: 10/8/2018 Task for future: if we have a group call? Need to implement <Collection> of User inside pipeline
         if (pipeline == null) {
             LOGGER.error("This user is not active user! Can't send message!");
Index: src/main/java/com/komin/core/utils/ResolvingTagsFromUserUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/komin/core/utils/ResolvingTagsFromUserUtils.java	(date 1539869315000)
+++ src/main/java/com/komin/core/utils/ResolvingTagsFromUserUtils.java	(date 1539869315000)
@@ -0,0 +1,70 @@
+package com.komin.core.utils;
+
+import com.komin.core.UserSession;
+
+import java.util.Collection;
+import java.util.PriorityQueue;
+
+public class ResolvingTagsFromUserUtils {
+
+    public static UserSession resolve(Collection<UserSession> userSessions, Collection<String> tags) {
+        PriorityQueue<Candidate> candidates = new PriorityQueue<>(userSessions.size());
+        for (UserSession userSession : userSessions) {
+            Collection<String> userTags = userSession.getTags();
+            int i = numberOfCoincidence(userTags, tags);
+            candidates.add(new Candidate(userSession, i));
+        }
+        Candidate candidate = candidates.poll();
+        if (candidate.getRating() == 0) {
+            return null;
+        }
+        return candidate.getUserSession();
+    }
+
+    private static int numberOfCoincidence(Collection<String> first, Collection<String> second) {
+        Object[] firstObjects = first.toArray();
+        Object[] secondObjects = second.toArray();
+        int i = 0, j = 0;
+        int coincidence = 0;
+        while (i < firstObjects.length && j < secondObjects.length) {
+            String firstObject = (String)firstObjects[i];
+            String secondObject = (String) secondObjects[j];
+            int compare = firstObject.compareTo(secondObject);
+            if (compare == 0) {
+                coincidence++;
+                i++;
+                j++;
+                continue;
+            }
+            if (compare < 0) {
+                j++;
+            } else {
+                i++;
+            }
+        }
+        return coincidence;
+    }
+
+    private static class Candidate implements Comparable<Candidate> {
+        UserSession getUserSession() {
+            return userSession;
+        }
+
+        int getRating() {
+            return rating;
+        }
+
+        private final UserSession userSession;
+        private final int rating;
+
+        Candidate(UserSession userSession, int rating) {
+            this.userSession = userSession;
+            this.rating = rating;
+        }
+
+        @Override
+        public int compareTo(Candidate o) {
+            return Integer.compare(this.rating, o.getRating());
+        }
+    }
+}
Index: src/main/js/app.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/js/app.js	(date 1539772996000)
+++ src/main/js/app.js	(date 1539869315000)
@@ -64,7 +64,7 @@
             {route: '/user/queue/errors', callback: this.showError},
             {route: '/user/queue/wait', callback: this.wait},
             {route: '/user/queue/connect', callback: this.connectUsers},
-            {route: '/user/queue/stop', callback: this.stopCommunication},
+            {route: '/user/queue/stop', callback: this.findNext},
             {route: '/user/queue/iceCandidates', callback: this.sendIceCandidates},
             {route: '/user/queue/newMessage', callback: this.receiveMessage},
         ]);
Index: src/main/js/components/ChatComponent.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/js/components/ChatComponent.js	(date 1539772996000)
+++ src/main/js/components/ChatComponent.js	(date 1539869315000)
@@ -7,8 +7,8 @@
             newItem : '',
             items : [],
             enable : false,
-            internalAvatar : '',
-            externalAvatar : '',
+            internalAvatar : 'img/batman.png',
+            externalAvatar : 'img/ork.png',
             register : props.register,
             sendButtonAction : props.chatButtonAction,
             maxMessageInScreen : 8
@@ -117,7 +117,9 @@
                                 </div>
                             </div>
                             <div style={{padding : "10px"}}>
-                                <button disabled={!this.state.enable} className="glyphicon glyphicon-share-alt" onClick={this.addInternalMessage}/>
+                                <button disabled={!this.state.enable} className="glyphicon glyphicon-share-alt" onClick={this.addInternalMessage}>
+                                    <image src="img/send.png"/>
+                                </button>
                             </div>
                         </div>
                     </div>
